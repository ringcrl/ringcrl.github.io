[ { "title": "canvas像素对比测试用例", "url": "/posts/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E8%A7%86%E9%A2%91%E6%AF%94%E5%AF%B9%E6%96%B9%E6%A1%88/", "categories": "", "tags": "2021", "date": "2021-05-06 00:00:00 +0800", "snippet": "最近在做服务端 canvas-webgl 渲染，探索下怎么通过自动化的方案来保证渲染效果。探索背景网络上对 Canvas 的渲染测试用例方案归纳有三种： 方案一：Node 记录 Canvas 的 API 操作记录，验证执行，例如：jest-mock-canvas 方案二：真实浏览器渲染比对，例如 cypress 方案三：学习 Three.js 的 e2e 测试用例，使用 puppeteer 进行截图比对方案一没有太大意义，因为服务端渲染业务逻辑是跟前端完全一致的，影响渲染效果在更底层的 C++ 模块方案二需要开启浏览器验证，而我们的开发环境全是在容器中进行，没有可视化环境方案三主要..." }, { "title": "PS-AE-Sketch", "url": "/posts/PS-AE-Sketch/", "categories": "", "tags": "2021", "date": "2021-04-30 00:00:00 +0800", "snippet": "PS面板主菜单【窗口】下开启的窗户，必备的是【属性】、【信息】、【图层】选择图层 【cmd + 左键】 =&amp;gt; 选择图层 【option + 滚轮】 =&amp;gt; 放大缩小图像属性面板选择图层之后，可以再属性面板看到： 文本的字体大小和颜色 形状的填充色和圆角 智能对象的宽高信息面板有时候在【属性面板】不能看到图层的宽高信息，可以通过【cmd + T】打开操作变形，在信息面板就一定可以看到宽高了，看完后用【esc】退出吸管工具 设计稿中有一些不太明显的渐变色背景色模块，按住左键拖动吸管，观察信息面板就知道用【background-color】还是【linea..." }, { "title": "WebCodecs对音视频进行编码解码", "url": "/posts/WebCodecs%E5%AF%B9%E9%9F%B3%E8%A7%86%E9%A2%91%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/", "categories": "", "tags": "2020", "date": "2020-10-19 00:00:00 +0800", "snippet": "WebCodecs 草案：https://wicg.github.io/web-codecs/ Github：https://github.com/WICG/web-codecs允许 Web 应用程序对音频和视频进行编码和解码的 API在 Chrome &amp;gt;= 86 的版本进行体验 Chrome地址栏输入：chrome://flags/#enable-experimental-web-platform-features，设置成 Enabled 通过命令行启用 Chrome：/Applications/Google\\ Chrome.app/Contents/MacOS/..." }, { "title": "通过babel-plugin校验封装第三方提供的vue组件", "url": "/posts/%E9%80%9A%E8%BF%87babel-plugin%E6%A0%A1%E9%AA%8C%E5%B0%81%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84vue%E7%BB%84%E4%BB%B6/", "categories": "", "tags": "2020", "date": "2020-05-10 00:00:00 +0800", "snippet": "之前就了解过 babel AST 相关的知识，刚好一个业务需求需要校验与修改第三方提供的 vue 组件，用 babel-plugin 来做这件事再合适不过了。需求背景 三方提供互动的 vue 组件，如：https://m.v.qq.com/txi/dev 三方只编写基本的样式逻辑，最后需要在 vue 组件中注入默认 props、注入 mixins 提供与引擎通信的能力、并将 vue 组件挂在到 window._interactComps 下预期结果转换前的 vue 代码Bubble.vue&amp;lt;style&amp;gt;.bubble { position: absolu..." }, { "title": "Telegram+rssbot搭建个人信息流服务", "url": "/posts/Telegram+rssbot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E6%B5%81%E6%9C%8D%E5%8A%A1/", "categories": "", "tags": "2020", "date": "2020-04-12 00:00:00 +0800", "snippet": "【即刻】走丢了很久，怀念她。想有一个渠道可以收敛日常生活中的所有通知，发现 Telegram 机器人配合 RSS 就很好的兼顾了阅读体验以及拓展支持，打开机器人对话框就能呈现一个完美的 Timeline。方案：Telegram + 谷歌云 + flowerss-bot + RSSHubTelegram 机器人申请在 Telegram 搜索 @BotFather，发送 /newbot 新建一个你的专属机器人，得到 token 后面会用到申请谷歌云因为网络通信原因，找了个可以白嫖的国外云服务厂商，首年免费，使用下来体验真的挺不错https://console.cloud.google.com..." }, { "title": "WebAssembly+ffmpeg浏览器视频处理", "url": "/posts/WebAssembly+ffmpeg%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/", "categories": "", "tags": "2019", "date": "2019-10-19 00:00:00 +0800", "snippet": " ffmpeg 编译成 wasm 供浏览器使用 浏览器上传视频后无缝对接 ffmpeg 能力EmscriptenEmscripten 是一个 LLVM 到 JS 的编译器，编译出 JS 文件供浏览器使用，也可以生成 WASM 提供更好的性能体验。环境准备cmake、git、python2.7Mac 环境下，只需要通过 Homebrew 安装 cmake 即可安装 Homebrew：https://brew.shbrew install cmake如果因为网络问题无法使用 Homebrew，参考 8000 的这篇 Proxifier 教程：http://8000.oa.com/#/ar..." }, { "title": "MutationObserver计算FMP", "url": "/posts/MutationObserver%E8%AE%A1%E7%AE%97FMP/", "categories": "", "tags": "2019", "date": "2019-10-19 00:00:00 +0800", "snippet": " FMP 即 First Meaningful Paint，有意义的首屏时间 通过 MutationObserver 观察 DOM 结构变化以及视口范围计算实现实现方案const details = [];const ignoreEleList = [&#39;script&#39;, &#39;style&#39;, &#39;link&#39;, &#39;br&#39;];let observeDom;let firstScreenTiming;// 查看当前元素的祖先元素是否在数组中function isEleInArray(target, arr) { if (!targ..." }, { "title": "基金定投方案", "url": "/posts/%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95%E6%96%B9%E6%A1%88/", "categories": "", "tags": "2019", "date": "2019-08-18 00:00:00 +0800", "snippet": "实践一下基金定投的方案参考地址：https://zhuanlan.zhihu.com/p/59662099大盘只要在大盘 3000 点以下，定投指数基金，三年内一定能赚钱，年化收益 10%-20%定投原理长期定投长期定投，低位买入摊薄了持仓成本，在 ABCD 四天，各买入 1000 元，那么最后的收益将是：份额 / 成本 * 100% - 1 =（1000 + 500 + 2000 + 1000）/（1000 * 4）= 112.5% - 1 = 12.5%智能定投 高位少买，低位多买在 ABCD 四天，按照 1000、500、2000、1000 买入，那么最后的收益将是：收益 = 份..." }, { "title": "Sequelize-cheat-sheet", "url": "/posts/Sequelize-cheat-sheet/", "categories": "", "tags": "2019", "date": "2019-07-07 00:00:00 +0800", "snippet": "最近需要用到 Mysql 来存一些前端 FusionData（前端定义的数据，存成字符串，自己 parse 后理解），选型就是 Sequelize 这个 Node.js ORM（对象关系映射）文档：http://docs.sequelizejs.com/安装yarn add sequelizeyarn add mysql2数据库连接const Sequelize = require(&#39;sequelize&#39;);const sequelize = new Sequelize( &#39;exe&#39;, // 数据库名称 &#39;root&#39;, // 用户名 ..." }, { "title": "Svg-filter", "url": "/posts/Svg-filter/", "categories": "", "tags": "2019", "date": "2019-04-28 00:00:00 +0800", "snippet": " filter 的原理与参数 如何实现一个积木拖起后的加边框加阴影效果filter 原理与参数原理 使用了 filter 的 svg们不会将图案直接渲染为最终图形，会渲染图案的像素到临时位图中 由 filter 指定的操作会被应用到该临时区域，其结果会被渲染为最终图形 filter 标记之间就是执行我们想要操作的滤镜基元，每个基元有一个或多个输入，但只有一个输出 基元的输入可以是原始图形(SourceGraphic)、图形的不透明度通道(SourceAlpha)、前一个滤镜基元的输出，只有对图形的形状感兴趣而不管颜色时，不透明度通道是有用的，不透明度通道会和颜色相互作用&am..." }, { "title": "KeyEvents与输入抖动问题", "url": "/posts/KeyEvents%E4%B8%8E%E8%BE%93%E5%85%A5%E6%8A%96%E5%8A%A8%E9%97%AE%E9%A2%98/", "categories": "", "tags": "2019", "date": "2019-04-22 00:00:00 +0800", "snippet": " 输入框的长度会随着已输入字符长度变化，为什么会出现抖动？ 为什么 scratch 的键盘事件要绑成这样子？输入抖动问题在积木中输入框会根据已输入字符的长度更新输入框的长度，输入框其实是一个 input，盖在了 SVG 之上，并根据 SVG 的长度计算最新长度并更新：但最近发现个问题，由于 input 的 CSS 属性是 text-align: center;，值改变之后再更新长度居中，视觉上会出现先往左，再居中的“抖一下”效果。通过观察样式更新的方法，发现更改宽度的方法比值更改的方法慢了 100ms 左右的时间触发，查看了一下更改宽度的方法绑在了 keyup 事件之上，而 keyu..." }, { "title": "React单元测试-Jest&amp;enzyme", "url": "/posts/React%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-Jest&enzyme/", "categories": "", "tags": "2019", "date": "2019-04-16 00:00:00 +0800", "snippet": " 结合一个 Todo-List 的例子进行 React 单元测试 模板使用：React、Redux、Webpack@4、Babel@7项目地址https://github.com/ringcrl/react-todolist-enzyme环境搭建复习一下 React 环境搭建。相关文档 webpack-loader Babel Usage Guide Configuring Jest Using enzyme with Jest依赖安装# reactyarn add react react-dom react-redux redux# babelyarn add -D @ba..." }, { "title": "实现自定义parsefloat", "url": "/posts/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89parseFloat/", "categories": "", "tags": "", "date": "2019-03-26 00:00:00 +0800", "snippet": "layout: posttitle: 实现自定义parseFloattags: [‘2019’]—一个很不常见的需求 支持超出 17 位的数字（Number.MAX_SAFE_INTEGER）的展示 大数不转为科学计数法 各种正负号、000、科学计数法输入、数字加字符、字符加数字的 edge case 处理 全部使用正则处理，待进行 Benchmark 后才能确定能否用于生产 完全基于 TDD 开发/** * 测试用例，待完善 */const testCase = [ &#39;-0.123&#39;, &#39;-.123&#39;, &#39;--123&#39;, ..." }, { "title": "大型xmlStr的DOMParser", "url": "/posts/%E5%A4%A7%E5%9E%8BxmlStr%E7%9A%84DOMParser/", "categories": "", "tags": "2019", "date": "2019-03-21 00:00:00 +0800", "snippet": " new DOMParser.parseFromString(xml, &#39;text/html&#39;) 的最大深度是 512，大于之后会把更深层次的 DOM 节点拍平到最后一层？ 上古时代 JQ 用法 $(&#39;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#39;).html(xml).get(0) 走的是上面的流程？ 如何超出这个限制？有个疑难杂症，产品说如果积木量达到 2000 多块的时候，保存后再重新打开，会出现积木丢失的情况。这个 2000 多还不是个定数，某些卡口积木的组合达到 4000 多的时候出现。这时候建立一个最简复..." }, { "title": "Cookie的SameSite属性", "url": "/posts/Cookie%E7%9A%84SameSite%E5%B1%9E%E6%80%A7/", "categories": "", "tags": "2019", "date": "2019-03-14 00:00:00 +0800", "snippet": "翻译自：https://medium.com/compass-security/samesite-cookie-attribute-33b3bfeaeb95 17年的文章，是对 CSRF 很好的防御手段 理解了这个属性也能避免很多开发上的麻烦，例如 iFrame 中的 Cookie 处理介绍过去十年，我教我的学生五个 cookie 属性:“path, domain, expire, HttpOnly, Secure”。但是现在我们有了一个新属性 -SameSite。你知道新引入的 SameSite cookie 属性的细节吗？一种新的防止跨站点请求伪造（cross site requ..." }, { "title": "Decorator &amp; Reflect Metadata &amp; InversifyJS", "url": "/posts/Decorator-&-Reflect-Metadata-&-InversifyJS/", "categories": "", "tags": "2019", "date": "2019-01-11 00:00:00 +0800", "snippet": " InversifyJS 比 SOLID（面向对象设计)中的 D（依赖反转）好在哪里？ 四种 Decorator Reflect Metadata InversifyJSSOLID-D VS InversifyJSSOLID-D 高层模块不应该依赖于低层模块，他们都应该依赖于抽象接口 抽象接口应该脱离具体实现，具体实现应该依赖于抽象接口// 反例class InventoryTracker { constructor(items) { this.items = items; // 依赖了一个具体实现 this.requester = new Invento..." }, { "title": "Sentry前端错误监控系统搭建", "url": "/posts/Sentry%E5%89%8D%E7%AB%AF%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/", "categories": "", "tags": "2019", "date": "2019-01-02 00:00:00 +0800", "snippet": "通过 docker 搭建自己的 Sentry 前端错误监控系统。官方版本注册账号https://sentry.io/signup/接入 SDK&amp;lt;script src=&quot;https://browser.sentry-cdn.com/4.4.2/bundle.min.js&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;配置 SDKProject =&amp;gt; Client Keys(DSN)Sentry.init({ dsn: &quot;https://cbff..." }, { "title": "编写webpack-loader", "url": "/posts/%E7%BC%96%E5%86%99webpack-loader/", "categories": "", "tags": "2018", "date": "2018-12-23 00:00:00 +0800", "snippet": "我们用过很多的 webpack loader 例如：babel-loader、less-loader、css-loader 之类的，如何写一个我们自己的 loader 呢？webpack.config.jsconst path = require(&quot;path&quot;);module.exports = { mode: &quot;development&quot;, resolveLoader: { modules: [ &quot;node_modules&quot;, // 本地的路径，把所有 xxx-loader.js 丢到这个目录下 ..." }, { "title": "借助 Webpack 静态分析能力实现代码动态加载", "url": "/posts/%E5%80%9F%E5%8A%A9-Webpack-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E8%83%BD%E5%8A%9B%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/", "categories": "", "tags": "2018", "date": "2018-12-10 00:00:00 +0800", "snippet": "Debugger 一个动态配置代码异步加载引发的状态错误问题，最后从 Webpack 的角度利用静态代码分析的能力来解决问题。现象父组件 kitten.tsxcomponentDidMount() { console.log(&#39;cc kitten didMount&#39;); setTimeout( () =&amp;gt; { console.log(&#39;cc kitten render_content before&#39;); this.render_content(); console.log(&#39;cc kitten ..." }, { "title": "制作一个Node命令行图像识别工具", "url": "/posts/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AANode%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7/", "categories": "", "tags": "2018", "date": "2018-12-09 00:00:00 +0800", "snippet": "从 0 开始制作一个 NodeJS 命令行验证码识别工具。实现如下效果。初始化项目# 创建 recognition 项目mkdir recognitioncd recognitionnpm init -y# 安装主依赖yarn add images tesseract.js# 安装工具依赖yarn add chalk yargs# 可选依赖yarn add socks5-http-client依赖说明 images：Node.js 轻量级跨平台图像编码库，用于处理下载下来的图片 tesseract.js：纯 JS 实现的 OCR（光学字符识别）工具，用于图像内容识..." }, { "title": "Safari-audio-policy", "url": "/posts/Safari-audio-policy/", "categories": "", "tags": "2018", "date": "2018-12-04 00:00:00 +0800", "snippet": "New &amp;lt;video&amp;gt; Policies for iOS 政策限制了音频必须由用户主动触发。不过如果是自己的 APP 的话就可以通过修改 iOS 配置来禁用这个限制。如图所示，通过配置 mediaTypesRequiringUserActionForPlayback，自己的 APP 中，Web 播放音频就不需要人为来触发了。注意：需要判断 iOS 10 以下，使用旧的 API。" }, { "title": "硬件加速不是银弹", "url": "/posts/%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E4%B8%8D%E6%98%AF%E9%93%B6%E5%BC%B9/", "categories": "", "tags": "2018", "date": "2018-11-22 00:00:00 +0800", "snippet": "积木区发现一个诡异的现象，在一些低端机型上，使用 translate3d 反而更卡？来看看 Composite（合成层） 的细节。Chrome RenderingWeb 展示流程JavaScript =&amp;gt; Style =&amp;gt; Layout =&amp;gt; Paint =&amp;gt; Composite JavaScript：我们会使用 JavaScript 来实现一些视觉变化的效果。比如做一个动画或者往页面里添加一些 DOM 元素等。 Style：计算样式，这个过程是根据 CSS 选择器，对每个 DOM 元素匹配对应的 CSS 样式。这一步结束之后，..." }, { "title": "JAVASCRIPT BUT LESS IFFY", "url": "/posts/JAVASCRIPT-BUT-LESS-IFFY/", "categories": "", "tags": "2018", "date": "2018-11-15 00:00:00 +0800", "snippet": "“这很难，是因为它很复杂，还是因为对它不熟悉？熟悉度是接受更复杂代码的充分理由吗？“发现一篇好文，看完之后写代码瞬间好理解了很多！！！翻译一下全文。原文地址：https://jrsinclair.com/articles/2017/javascript-but-less-iffy/这是关于降低 JavaScript 代码复杂性的一系列文章的第三部分。在以前的文章中，我们认为缩进是复杂性的一个指标。这不是一个准确或全面的指标，但它可以成为一个有用的指南。然后，我们研究了如何用更高级别的抽象来代替循环。在这篇文章中，我们将注意力转向条件句。不幸的是，我们不能完全摆脱条件句，这将意味着对大多数..." }, { "title": "前端监控工具制作", "url": "/posts/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%88%B6%E4%BD%9C/", "categories": "", "tags": "2018", "date": "2018-11-10 00:00:00 +0800", "snippet": " 原生监控 lighthouse api公司项目多起来之后, 文档的作用虽然大, 但是起不到强制约束的作用, 例如部分项目没有正确使用 CDN 等。这时候我们可以利用 lighthouse 提供的 api 制作自己公司的校验军规。原生监控主要利用了 Window.performance 的 API。页面性能class Perf { init(cb: Function) { window.addEventListener( &quot;load&quot;, () =&amp;gt; { this.check(cb); }, ..." }, { "title": "AudioContext被动关闭", "url": "/posts/AudioContext%E8%A2%AB%E5%8A%A8%E5%85%B3%E9%97%AD/", "categories": "", "tags": "2018", "date": "2018-10-29 00:00:00 +0800", "snippet": "使用 howler.js 的时候发现，设备被“打断”的场景下，声音就再也播不出来了。甚至在合作方的硬件设备上静置一段时间也出现同样的情况。看 howler 代码的时候发现，AudioContext 只会被 new 一次，并且存在 Holwer.ctx 上：Howler.ctx = new AudioContext();再次读取 Howler.ctx 的时候，如果已经有实例了，就使用之前那个实例。这样做有个问题，就是遇到一些情况例如：来电话，或者系统为了节能做了一些优化，很容易出现之前的声音实例已经没办法再使设备发声了。这时候需要为 Howler 加一个 dispose 方法，即可根据自己..." }, { "title": "JSBridge", "url": "/posts/JSBridge/", "categories": "", "tags": "2018", "date": "2018-09-09 00:00:00 +0800", "snippet": "JSBridge 其实在职业生涯中已经多次用过了，例如微信的 WeiXinJSBridge（JSSDK）、RN 的 window.postMessage，但让我自己描述这一过程所用的语句还非常“外行”，现在系统整理一下。原文地址：https://juejin.im/post/5abca877f265da238155b6bc原理 JSBridge 调用可以看作一次 RPC（remote procedure call，远程过程调用）。前端是 RPC 的客户端，Native 是 RPC 的服务端 简单来说就是各种 Web 页面可以通过 Bridge 来调用应用的一些原生功能。主要就是给 J..." }, { "title": "JavaScript的反应性", "url": "/posts/JavaScript%E7%9A%84%E5%8F%8D%E5%BA%94%E6%80%A7/", "categories": "", "tags": "2018", "date": "2018-08-21 00:00:00 +0800", "snippet": "反应性并不是 JavaScript 编程通常的运行方式，Vue 的反应性是如何实现的？原文地址：https://mp.weixin.qq.com/s/Wm5-3hsqre7ft_f0YBnoeg程序基本运行逻辑let price = 5;let quantity = 2;let total = price * quantity;price = 20;console.log(total); // 是 10，然而我们希望得到新的值 40依赖类let data = { price: 5, quantity: 2,};let target = null;// Dependence 类clas..." }, { "title": "什么是Mutator", "url": "/posts/%E4%BB%80%E4%B9%88%E6%98%AFMutator/", "categories": "", "tags": "2018", "date": "2018-08-03 00:00:00 +0800", "snippet": "Blockly 里面的 Blocks 有一个很重要的概念 Mutator，在改它实现的时候慢慢悟出 Mutator 概念的精妙之处。Mutator 是什么？Wikipedia 上的解释：In computer science, a mutator method is a method used to control changes to a variable. They are also widely known as setter methods. Often a setter is accompanied by a getter (also known as an accessor)..." }, { "title": "大话数据结构", "url": "/posts/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/", "categories": "", "tags": "2018", "date": "2018-07-10 00:00:00 +0800", "snippet": "大话数据结构数据结构 数据结构就是以某种特定的布局存储数据 这个布局使得某些操作非常高些，另外一些操作不那么高效 理解数据结构，就能为手头问题选择最优的数据结构算法算法是解决特定问题求解步骤的描述存储结构 顺序存储结构 在内存地址中连续存储 建立定长数组，计算机在内存中开辟连续空间 链式存储结构 存储单元可连续可不连续，存放的是指针地址，通过地址就能找到关联数据 单线联系，断了就找不到了 数组 误区 数组是适合查找操作，但是查找的时间复杂度并不为 O(1)，..." }, { "title": "JS拷贝", "url": "/posts/JS%E6%8B%B7%E8%B4%9D/", "categories": "", "tags": "2018", "date": "2018-06-16 00:00:00 +0800", "snippet": "浅拷贝 / 深拷贝： clone-deep JSON.stringify 尤雨溪的 circular-json-es6 @jsmini/clone …浅拷贝浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，修改时原对象也会受到影响 Object.assign 展开运算符(…)clone-deep深拷贝需要考虑： JSON 克隆不支持函数、引用、undefined、Date、RegExp 等 递归克隆要考虑环 要考虑 Date、RegExp、Function 等特殊对象的克隆方式 要不要克隆 proto，如果要克隆，就非常浪费内存；如果不克隆，就不是深克隆所以一般..." }, { "title": "WireShark使用", "url": "/posts/WireShark%E4%BD%BF%E7%94%A8/", "categories": "", "tags": "2018", "date": "2018-06-10 00:00:00 +0800", "snippet": "一款直接连接网卡抓取封包的软件，能够与网络近距离接触。选取需要抓包的网卡点击 Caputre-&amp;gt;Interfaces..选择正确的网卡。然后点击”Start”按钮, 开始抓包Display Filter(显示过滤器)显示捕获到的封包， 有源地址和目标地址，端口号。协议过滤比如 TCP，只显示 TCP 协议。IP 过滤比如 ip.src==192.168.1.102 显示源地址为 192.168.1.102，ip.dst==192.168.1.102, 目标地址为 192.168.1.102端口过滤tcp.port==80, 端口为 80 的tcp.srcport==80, ..." }, { "title": "ES6转ES5", "url": "/posts/ES6%E8%BD%ACES5/", "categories": "", "tags": "2018", "date": "2018-04-27 00:00:00 +0800", "snippet": "用 ES5 实现 ES6 的特性。Babel 在线转换去 Babel 中文网 尝试一下吧。箭头函数与函数表达式相比，箭头函数（也称为胖箭头函数）具有更短的语法，并且词法绑定 this。箭头功能始终是匿名的。ES6[1, 2, 3].map((n) =&amp;gt; n * 2);// -&amp;gt; [ 2, 4, 6 ]ES5[1, 2, 3].map(function (n) { return n * 2;}, this);// -&amp;gt; [ 2, 4, 6 ]ES6var evens = [2, 4, 6, 8, 10];// Expression bodiesv..." }, { "title": "从0开始编写一个VSCode翻译插件", "url": "/posts/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAVSCode%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6/", "categories": "", "tags": "2018", "date": "2018-04-15 00:00:00 +0800", "snippet": "从 0 开始编写一个非常好用的 VSCode 翻译插件。项目简介线上地址https://github.com/ringcrl/vscode-translator功能演示 长句子翻译 高度不可定制化生词本功能show time…环境搭建全局依赖npm install -g yo generator-code vsce生成代码yo code 开发什么东西(TS) 扩展的名称 各种配置项…项目结构开发模块package.json{ &quot;name&quot;: &quot;vscode-translator&quot;, // 插件扩展名称（对应创建项目时候的输入） &qu..." }, { "title": "组件实现思路", "url": "/posts/%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/", "categories": "", "tags": "2018", "date": "2018-03-24 00:00:00 +0800", "snippet": "总是用轮子，造轮子的思路是什么呢？原则（内部）分层原则：正交原则（对外）封装原则：面向接口编程分层原则：正交原则HTML、CSS、JS 三者分离。例如：不要用 JS 直接去改 CSS，而是增加一个 class，具体的样式还是由 CSS 提供。封装原则：面向接口编程首要考虑的不是代码如何写，而是代码如何被调用。五个轮子Tabs对外接口&amp;lt;body&amp;gt; &amp;lt;div class=&quot;tabs&quot;&amp;gt; &amp;lt;ol class=&quot;tabs-bar&quot;&amp;gt; &amp;lt;li&..." }, { "title": "双向绑定与单向绑定", "url": "/posts/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E4%B8%8E%E5%8D%95%E5%90%91%E7%BB%91%E5%AE%9A/", "categories": "", "tags": "2018", "date": "2018-03-22 00:00:00 +0800", "snippet": "说到前端框架，就总会谈论到什么「双向绑定」和「单向绑定」这些概念了。MVC页面上的代码总是可以分成三类： 专门操作远程数据的代码（fetchDb 和 saveDb 等等） 专门呈现页面元素的代码（innerHTML 等等） 其他控制逻辑的代码（点击某按钮之后做啥的代码）思想 M 专门负责数据 V 专门负责表现 C 负责其他逻辑使用 MVC 模式改造意大利面条代码： 把意大利面条变成三块有结构有组织的对象：model、view 和 controller model 只负责存储数据、请求数据、更新数据 view 只负责渲染 HTML（可接受一个 data 来定制数据） c..." }, { "title": "Web陀螺仪与重力感应", "url": "/posts/Web%E9%99%80%E8%9E%BA%E4%BB%AA%E4%B8%8E%E9%87%8D%E5%8A%9B%E6%84%9F%E5%BA%94/", "categories": "", "tags": "2018", "date": "2018-03-20 00:00:00 +0800", "snippet": "陀螺仪与重力感应配置与注意点： API 使用 临界点处理 翻转处理 iOS 12.2 政策devicemotionfunction init_devicemotion_listener() { if ((window as any).DeviceMotionEvent) { window.addEventListener(&#39;devicemotion&#39;, device_motion_handler, false); }}const device_motion_handler = (function() { // remove all comments，h..." }, { "title": "JS内存分析", "url": "/posts/JS%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/", "categories": "", "tags": "2018", "date": "2018-02-03 00:00:00 +0800", "snippet": "使用 Chrome 和 DevTools 查找影响页面性能的内存问题 内存泄漏 内存膨胀 频繁的垃圾回收内存问题 页面的性能随着时间的延长越来越差。 这可能是内存泄漏的症状。 内存泄漏是指，页面中的错误导致页面随着时间的延长使用的内存越来越多。 页面的性能一直很糟糕。 这可能是内存膨胀的症状。 内存膨胀是指，页面为达到最佳速度而使用的内存比本应使用的内存多。 页面出现延迟或者经常暂停。 这可能是频繁垃圾回收的症状。 垃圾回收是指浏览器收回内存。 浏览器决定何时进行垃圾回收。 回收期间，所有脚本执行都将暂停。因此，如果浏览器经常进行垃圾回收，脚本执行就会被频繁暂停。监视内存使用..." }, { "title": "实现一个Lazy-Load", "url": "/posts/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AALazy-Load/", "categories": "", "tags": "2018", "date": "2018-02-02 00:00:00 +0800", "snippet": "我们可以在页面打开的时候把首屏的图片资源加载出来，等用户滚动的时候再把页面其他部分呈现。html&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;UTF-8&quot; /&amp;gt; &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&amp..." }, { "title": "学习Pixi并制作一个小游戏", "url": "/posts/%E5%AD%A6%E4%B9%A0Pixi%E5%B9%B6%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F/", "categories": "", "tags": "2017", "date": "2017-12-16 00:00:00 +0800", "snippet": "学习用 PixiJS 制作游戏和互动媒体。初始化 pixi&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt; &amp;lt;title&amp;gt;Hello World&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;script src=&quot;pixi.min.js&quot;&amp;gt;&amp;lt;/scr..." }, { "title": "前端本地文件操作与上传", "url": "/posts/%E5%89%8D%E7%AB%AF%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E4%B8%8A%E4%BC%A0/", "categories": "", "tags": "2017", "date": "2017-12-16 00:00:00 +0800", "snippet": "前端与用户的文件交互需要由用户触发，用户可以通过三种方式触发文件上传。原文地址：https://juejin.im/post/5a193b4bf265da43052e528a用户可通过以下三种方式操作触发： 通过 input type=”file” 选择本地文件 通过拖拽的方式把文件拖过来 在编辑框里面复制粘贴通过 input type=”file” 选择本地文件FormData通常还会自定义一个按钮，然后盖在它上面，因为 type=”file”的 input 不好改变样式&amp;lt;form&amp;gt; &amp;lt;input type=&quot;file&quo..." }, { "title": "动手实现与使用Redux", "url": "/posts/%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BD%BF%E7%94%A8Redux/", "categories": "", "tags": "2017", "date": "2017-11-23 00:00:00 +0800", "snippet": "也许马上要用到 React-Redux 了，跟着教程感受一下 Redux 的实现原理。原文地址：React.js 小书Redux 和 React-redux 并不是同一个东西。Redux 是一种架构模式（Flux 架构的一种变种），它不关注你到底用什么库，你可以把它应用到 React 和 Vue，甚至跟 jQuery 结合都没有问题。而 React-redux 就是把 Redux 这种架构模式和 React.js 结合起来的一个库，就是 Redux 架构在 React.js 中的体现。实现 Redux优雅地修改共享状态假如有一个应用的状态对象const appState = { tit..." }, { "title": "四种瀑布流布局处理方案", "url": "/posts/%E5%9B%9B%E7%A7%8D%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/", "categories": "", "tags": "2017", "date": "2017-11-01 00:00:00 +0800", "snippet": "等宽等高，等宽不等高，等高不等宽，既不等宽又不等高。等宽等高利用 inline-block 或者 float 的方式即可实现等宽不等高使用插件实现直接调用 Masonry 库即可实现。使用 JS 或 CSS 实现js 的实现方法首先需要确定网页应用的宽度和每个需要放置元素的宽度，通过计算可以得到布局的列数 C 。布局元素是从主容器的左上角开始依次向下放置，因此将左上角为坐标原点（0， 0），布局元素利用相对于主容器绝对定位的方式来确定位置。维护一个长度为 C 的数组 A，分别记录该列在垂直方向上的坐标，每放置一个元素时，遍历数组 A 得到垂直坐标最小数组元素的索引 i ，计算出坐标值并分..." }, { "title": "横屏H5适配", "url": "/posts/%E6%A8%AA%E5%B1%8FH5%E9%80%82%E9%85%8D/", "categories": "", "tags": "2017", "date": "2017-10-31 00:00:00 +0800", "snippet": "横屏 H5 有些坑。解决方法有无解锁竖屏锁定，手机横向时可以浏览。横竖屏适配transform-origin: 0 0 0;transform: rotate(90deg) translateY(-clientWidth);使用 API 来判断屏幕的横竖屏情况window.matchMedia(&quot;(orientation: portrait)&quot;);// 返回一个 match 的情况，如果是横屏就不处理，如果是竖屏，就采用上一步的【横竖屏适配】方案音频控制应对 IOS 系统不支持自动播放的情况，借助微信的 WeixinJSBridgeReady 事件。视频控制视屏没有播..." }, { "title": "CentOS7搭建Shadowsocks", "url": "/posts/CentOS7%E6%90%AD%E5%BB%BAShadowsocks/", "categories": "", "tags": "2017", "date": "2017-10-06 00:00:00 +0800", "snippet": "一觉睡醒，发现 Shadowsocks 所有节点都超时了，只好在自己的 vultr 服务器上面搭一个了。安装 Python 相关的工具sudo yum install python-pippip install --upgrade pipsudo yum install python-develsudo yum install openssl-devel使用 pip 安装 ss、加密依赖包sudo pip install shadowsockssudo pip install M2Crypto配置 /etc/shadowsocks.json 文件{ &quot;server&quo..." }, { "title": "服务端node导出excel的方案", "url": "/posts/%E6%9C%8D%E5%8A%A1%E7%AB%AFnode%E5%AF%BC%E5%87%BAexcel%E7%9A%84%E6%96%B9%E6%A1%88/", "categories": "", "tags": "2017", "date": "2017-08-08 00:00:00 +0800", "snippet": "前端浏览器导出 excel 是十分不靠谱的，后台又不配合，怎么办？自己在 node 层撸一个出来咯。node-xlsx的使用node-xlsx文档地址：https://github.com/mgcrea/node-xlsxnode-xlsx依赖于 js-xlsx 组件，API极简单，可读写xlsx文件内容。node-xlsx的主要使用方法如下：读xlsx文件let xlsx = require(&#39;node-xlsx&#39;), fs = require(&#39;fs&#39;);const workSheetsFromBuffer = xlsx.parse(fs.rea..." }, { "title": "AI五子棋实现", "url": "/posts/AI%E4%BA%94%E5%AD%90%E6%A3%8B%E5%AE%9E%E7%8E%B0/", "categories": "", "tags": "2017", "date": "2017-08-01 00:00:00 +0800", "snippet": "可以实现一个你下不赢的五子棋吗？win = [ [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0..." }, { "title": "移动端软键盘与定位布局", "url": "/posts/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BD%AF%E9%94%AE%E7%9B%98%E4%B8%8E%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80/", "categories": "", "tags": "2017", "date": "2017-06-16 00:00:00 +0800", "snippet": "虽然第一份工作大部分时间是做移动端，主要用的是 flex 和 rem 布局，到后期放弃 rem 了，发现大屏手机显示更多内容的效果更好。以前也遇到过软键盘影响定位布局的问题，都是拿来老板手机同款的测试机，定位出问题就流水布局吧，各种投机倒把把当前需求完成就完事了。立个 flag，遇到问题，不稳稳的解决不罢休。小键盘影响布局最近在安卓手机上遇到个现象，软键盘弹出的时候，把整个背景都顶上去了，我对背景用的是 100% 这样的布局形式。html,body { height: 100%;}这就有个问题，iOS 下面软键盘的弹出并不会干扰页面显示，但是安卓下的软键盘弹出会挤压 body，导致这个..." }, { "title": "前端MOCK数据", "url": "/posts/%E5%89%8D%E7%AB%AFMOCK%E6%95%B0%E6%8D%AE/", "categories": "", "tags": "2017", "date": "2017-05-20 00:00:00 +0800", "snippet": "前端 Mock 数据最佳实践。// 文档：https://github.com/nuysoft/Mock/wiki// 后台定义的数据格式let raw = { data: { eid: 27149, // 试卷ID title: &quot;&quot;, // 试卷标题 intro: &quot;&quot;, // 试卷介绍 imgs: &quot;&quot;, // 试卷介绍用的图片 cost: 0, // 答题所需消耗的分数 answered: 0, // 当前用户是否已答过题,0=未答，1=已答。对于访客或get_answer=0时，不..." }, { "title": "微信支付前后端联调流程", "url": "/posts/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83%E6%B5%81%E7%A8%8B/", "categories": "", "tags": "2017", "date": "2017-04-01 00:00:00 +0800", "snippet": "微信支付的前后端联调挺多坑的，这里记录一下。1、后台调用微信接口拿到 access_token# 请求方式https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;amp;appid=xxxx&amp;amp;secret=xxxxx# 请求结果{&quot;access_token&quot;:&quot;7iBVY8GoBbGpo1wuUNmYIVPFw0ji72KECJouLQvlzlUviJ9q7C4RkLACcoha5PrS47NWi0XC7KLhbwlSXVe1bM8LXkW6bDhKCd..." }, { "title": "example", "url": "/posts/example/", "categories": "", "tags": "2016", "date": "2016-07-11 00:00:00 +0800", "snippet": "var foo = function (x) { return x + 5;};foo(3);Note: This is a notification box." } ]
